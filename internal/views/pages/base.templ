package pages

import (
	"fmt"
	"github.com/haatos/goshipit/internal"
	"github.com/haatos/goshipit/internal/model"
	"github.com/haatos/goshipit/internal/views/components"
	"github.com/haatos/goshipit/internal/views/examples"
	"time"
)

templ DefaultHead() {
	@Head(
		"goship.it",
		[]string{
			"/static/css/tw.css",
			"/static/css/custom.css",
			"/static/css/chroma.css",
		},
		[]model.Script{
			{Source: "/static/js/htmx.min.js"},
		},
	)
}

templ Head(title string, stylesheets []string, scripts []model.Script) {
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<style>
			@import url('https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@500&family=Montserrat:ital,wght@0,100..900;1,100..900&family=Orbitron:wght@600&display=swap');
		</style>
		for _, st := range stylesheets {
			<link rel="stylesheet" href={ st }/>
		}
		for _, sc := range scripts {
			<script if sc.Defer {
	defer="true"
} src={ sc.Source }>
</script>
		}
		<title>{ title }</title>
	</head>
}

templ SideNavLayout(head templ.Component) {
	<!DOCTYPE html>
	<html data-theme="getColorScheme()" lang="en">
		@DefaultHead()
		<body>
			<div class="drawer xl:drawer-open">
				<input id="nav-drawer" type="checkbox" class="drawer-toggle"/>
				<div class="drawer-content">
					<div class="flex space-x-1 items-center">
						<label for="nav-drawer" class="cursor-pointer btn btn-ghost drawer-button xl:hidden">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								class="h-5 w-5"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M4 6h16M4 12h8m-8 6h16"
								></path>
							</svg>
						</label>
						<a
							href="/"
							class="group btn !shadow-none !bg-transparent !border-none flex items-center xl:hidden"
						>
							<img class="max-w-8 hidden dark:block" src="/static/images/dark.png" alt="Logo"/>
							<img class="max-w-8 dark:hidden" src="/static/images/light.png" alt="Logo"/>
						</a>
					</div>
					<main class="w-full max-w-screen-lg min-h-svh pl-8 pr-8 xl:pr-0">
						{ children... }
					</main>
					@components.Footer(
						model.CompanyInfo{
							Name:      "Haatos Ltd",
							Copyright: fmt.Sprintf("%s", time.Now().UTC().Format("2006")),
						},
						[]model.Anchor{
							{LeftIcon: examples.GithubIcon(), Href: "https://github.com/haatos"},
							{LeftIcon: examples.LinkedInIcon(), Href: "https://linkedin.com/in/tomihaapalainen"},
						}) {
						@components.FooterNav(
							"Links",
							[]model.Anchor{
								{
									Label: "Getting started",
									Attrs: templ.Attributes{
										"name":        "hx-anchor",
										"hx-get":      "/get-started",
										"hx-target":   "main",
										"hx-swap":     "innerHTML",
										"hx-push-url": "true",
									},
								},
								{
									Label: "Types",
									Attrs: templ.Attributes{
										"name":        "hx-anchor",
										"hx-get":      "/types",
										"hx-target":   "main",
										"hx-swap":     "innerHTML",
										"hx-push-url": "true",
									},
								},
								{
									Label:    "GitHub",
									LeftIcon: examples.GithubIcon(),
									Attrs: templ.Attributes{
										"href": "https://github.com/haatos/goshipit",
									},
								},
								{
									Label: "About the creator",
									Attrs: templ.Attributes{
										"name":        "hx-anchor",
										"hx-get":      "/about",
										"hx-target":   "main",
										"hx-swap":     "innerHTML",
										"hx-push-url": "true",
									},
								},
							})
						@components.FooterNav(
							"Legal",
							[]model.Anchor{
								{
									Label: "Privacy policy",
									Attrs: templ.Attributes{
										"name":        "hx-anchor",
										"hx-get":      "/privacy",
										"hx-target":   "main",
										"hx-swap":     "innerHTML",
										"hx-push-url": "true",
									},
								},
								{
									Label: "Terms of Service",
									Attrs: templ.Attributes{
										"name":        "hx-anchor",
										"hx-get":      "/terms-of-service",
										"hx-target":   "main",
										"hx-swap":     "innerHTML",
										"hx-push-url": "true",
									},
								},
							})
					}
				</div>
				@drawerSide(
					[]model.Anchor{
						{
							Label: "Getting started",
							Attrs: templ.Attributes{
								"name":        "hx-anchor",
								"hx-get":      "/get-started",
								"hx-target":   "main",
								"hx-swap":     "innerHTML",
								"hx-push-url": "true",
							},
						},
						{
							Label: "Types",
							Attrs: templ.Attributes{
								"name":        "hx-anchor",
								"hx-get":      "/types",
								"hx-target":   "main",
								"hx-swap":     "innerHTML",
								"hx-push-url": "true",
							},
						},
						{
							Label:    "GitHub",
							LeftIcon: examples.GithubIcon(),
							Attrs: templ.Attributes{
								"href": "https://github.com/haatos/goshipit",
							},
						},
					},
				)
			</div>
			<script>
				function getColorScheme() {
					if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
						return "dark"
					} else {
						return "light"
					}
				}

				// check request status before htmx swap
				// set swapping incoming html to true and isError to false
				document.addEventListener("DOMContentLoaded", function() {
					document.addEventListener("htmx:beforeSwap", function(evt) {
						if (evt.detail.xhr.status === 422 || evt.detail.xhr.status === 403 || evt.detail.xhr.status == 500) {
							evt.detail.shouldSwap = true;
							evt.detail.isError = false;
						}
					})
				})
			</script>
			<script>
				document.addEventListener("DOMContentLoaded", () => {
					document.addEventListener("htmx:afterRequest", (evt) => {
						if (
							evt.detail.successful &&
							evt.detail.elt.getAttribute("name") === "hx-anchor"
						) {
							document.querySelector("input.drawer-toggle").checked = false
							document.querySelector("body").scrollIntoView({behavior: "smooth", block: "start"})
						}
					})
				})
			</script>
			<script>
				function activeMenuLink() {
				   document.querySelectorAll(".menu a").forEach(link => link.classList.remove("active"));
				   const activeLink = document.querySelector(`.menu a[hx-get="${window.location.pathname}"]`);
				   if (activeLink) {
					   activeLink.classList.add("active");
				   }
				}

				document.addEventListener("DOMContentLoaded", () => {
					document.addEventListener("htmx:afterSwap", function(event) {
						activeMenuLink()
					})

					activeMenuLink()
				})
			</script>
			<script>
				function reloadStylesheetsIfNeeded() {
					// Check if styles are missing
					const bodyStyles = window.getComputedStyle(document.body);
					if (!bodyStyles || bodyStyles.display === 'none' || bodyStyles.display === '') {
					// Styles are missing, reload all stylesheets
					const stylesheets = document.querySelectorAll('link[rel="stylesheet"]');
					stylesheets.forEach((stylesheet) => {
						const href = stylesheet.getAttribute('href').split('?')[0];
						stylesheet.setAttribute('href', `${href}?reload=${Date.now()}`);
					});
					}
				}

				// Handle page show event
				window.addEventListener('pageshow', function(event) {
					if (event.persisted) {
					reloadStylesheetsIfNeeded();
					}
				});

				// Handle visibility change event
				document.addEventListener('visibilitychange', function() {
					if (document.visibilityState === 'visible') {
					reloadStylesheetsIfNeeded();
					}
				});
			</script>
		</body>
	</html>
}

templ drawerSide(anchors []model.Anchor) {
	<div class="drawer-side">
		<label for="nav-drawer" aria-label="close sidebar" class="drawer-overlay"></label>
		<ul class="menu bg-base-300 text-base-content min-h-full w-80 p-4 space-y-2">
			<li class="pb-4">
				<a href="/" class="group hover:!bg-transparent flex justify-center items-center">
					<img class="max-w-12 hidden dark:block" src="/static/images/dark.png" alt="Logo"/>
					<img class="max-w-12 dark:hidden" src="/static/images/light.png" alt="Logo"/>
				</a>
			</li>
			<div id="my-active-search" class="pl-1">
				@components.ActiveSearchInput(
					model.ActiveSearchInput{
						ID:     "component-search-input",
						URL:    "/components/search",
						Target: "#search-dropdown-side",
						Input: model.Input{
							Icon:        searchIcon(),
							Name:        "search",
							Type:        "search",
							Placeholder: "Search...",
							Class:       "input-sm input-bordered",
						},
					})
				<div class="relative w-full max-w-xs">
					<div
						id="search-dropdown-side"
						class="w-full max-w-xs absolute top-2 left-0 z-50 rounded-box bg-base-200"
					></div>
				</div>
				<script>
					document.addEventListener("click", (evt) => {
						let activeSearch = evt.target.closest("#my-active-search")
						if (activeSearch === null) {
							let activeSearchDiv = document.getElementById("my-active-search")
							activeSearchDiv.querySelectorAll("div[name=search-list-item]").forEach(el => {
								el.remove()
							})
							activeSearchDiv.querySelector("form").reset()
						}
					})
				</script>
			</div>
			<!-- Sidebar content here -->
			for _, a := range anchors {
				<li>
					@components.Anchor(a)
				</li>
			}
			<div class="divider"></div>
			<div hx-get="/component-anchors" hx-swap="outerHTML" hx-trigger="intersect once"></div>
		</ul>
	</div>
}

templ searchIcon() {
	<svg
		class="w-5 h-5"
		viewBox="0 0 32 32"
		version="1.1"
		xmlns="http://www.w3.org/2000/svg"
		xmlns:xlink="http://www.w3.org/1999/xlink"
		xmlns:sketch="http://www.bohemiancoding.com/sketch/ns"
	>
		<g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" sketch:type="MSPage">
			<g class="fill-base-content/60" id="Icon-Set" sketch:type="MSLayerGroup" transform="translate(-256.000000, -1139.000000)">
				<path d="M269.46,1163.45 C263.17,1163.45 258.071,1158.44 258.071,1152.25 C258.071,1146.06 263.17,1141.04 269.46,1141.04 C275.75,1141.04 280.85,1146.06 280.85,1152.25 C280.85,1158.44 275.75,1163.45 269.46,1163.45 L269.46,1163.45 Z M287.688,1169.25 L279.429,1161.12 C281.591,1158.77 282.92,1155.67 282.92,1152.25 C282.92,1144.93 276.894,1139 269.46,1139 C262.026,1139 256,1144.93 256,1152.25 C256,1159.56 262.026,1165.49 269.46,1165.49 C272.672,1165.49 275.618,1164.38 277.932,1162.53 L286.224,1170.69 C286.629,1171.09 287.284,1171.09 287.688,1170.69 C288.093,1170.3 288.093,1169.65 287.688,1169.25 L287.688,1169.25 Z" id="search" sketch:type="MSShapeGroup"></path>
			</g>
		</g>
	</svg>
}

type ComponentSearchItem struct {
	Category string
	Name     string
}

templ ComponentSearchListItems(cs []ComponentSearchItem) {
	for i := range cs {
		<div name="search-list-item" class="m-2 px-2 py-1 bg-base-100 rounded-box cursor-pointer">
			<a
				name="component-search-anchor"
				href={ templ.SafeURL(fmt.Sprintf("/components/%s/%s", cs[i].Category, cs[i].Name)) }
			>
				<p class="text-xs text-base-content/75">
					{ internal.SnakeCaseToCapitalized(cs[i].Category) }
				</p>
				<p class="font-bold">
					{ internal.SnakeCaseToCapitalized(cs[i].Name) }
				</p>
			</a>
		</div>
	}
}

templ ComponentAnchors(keys []string, m model.ComponentCodeMap) {
	<ul class="menu">
		for _, k := range keys {
			<li>
				<h4 class="menu-title">{ internal.SnakeCaseToCapitalized(k) }</h4>
				<ul>
					for _, c := range m[k] {
						<li>
							<a
								name="hx-anchor"
								hx-get={ fmt.Sprintf("/components/%s/%s", k, c.Name) }
								hx-target="main"
								hx-swap="innerHTML"
								hx-push-url="true"
							>
								{ c.Label }
							</a>
						</li>
					}
				</ul>
			</li>
		}
	</ul>
}
