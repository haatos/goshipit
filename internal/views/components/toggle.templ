// data_input
// https://daisyui.com/components/toggle
package components

type ToggleProps struct {
	ID        string
	Before    string
	After     string
	Name      string
	Checked   bool
	Class     string
	Highlight bool
	Attrs     templ.Attributes
	Size      string
}

templ Toggle(props ToggleProps) {
	<div class="flex justify-center">
		<label class="label cursor-pointer space-x-2 mx-auto">
			if props.Before != "" {
				<span
					class={
						templ.KV("text-primary", props.Highlight && !props.Checked),
						templ.KV("text-xs", props.Size == "xs"),
						templ.KV("text-sm", props.Size == "sm"),
						templ.KV("text-lg", props.Size == "lg"),
						templ.KV("text-xl", props.Size == "xl"),
					}
				>
					{ props.Before }
				</span>
			}
			<input
				{ props.Attrs... }
				type="checkbox"
				if props.ID != "" {
					id={ props.ID }
				}
				name={ props.Name }
				class={
					"toggle", props.Class,
					templ.KV("toggle-xs", props.Size == "xs"),
					templ.KV("toggle-sm", props.Size == "sm"),
					templ.KV("toggle-lg", props.Size == "lg"),
					templ.KV("toggle-xl", props.Size == "xl"),
				}
				if props.Checked {
					checked="checked"
				}
				if props.Highlight {
					onclick="toggler(event)"
				}
			/>
			if props.After != "" {
				<span
					class={
						"label-text",
						templ.KV("text-primary", props.Highlight && props.Checked),
					}
				>
					{ props.After }
				</span>
			}
		</label>
		if props.Highlight {
			<script>
                function toggler(evt) {
                    evt.target.previousElementSibling.classList.toggle("text-primary")
                    evt.target.nextElementSibling.classList.toggle("text-primary")
                }
            </script>
		}
	</div>
}
